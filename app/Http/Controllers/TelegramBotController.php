<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use GuzzleHttp\Client;

class TelegramBotController extends Controller
{
    private $token;
    private $client;

    public function __construct()
    {
        $this->token = env('TELEGRAM_BOT_TOKEN');
        $this->validateToken();
        $this->client = new Client();
    }

    public function handleWebhook(Request $request)
    {
        $input = $request->all();
        Log::info('Telegram webhook request:', $input);

        if (!isset($input['message'])) {
            return response()->json(['status' => 'error', 'message' => '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å']);
        }

        $chatId = $input['message']['chat']['id'];
        $text = $input['message']['text'] ?? '';
        $userId = $input['message']['from']['id'];
        $messageTime = $input['message']['date'] ?? time();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $response = $this->handleUserInput($userId, $chatId, $text, $messageTime);
        $this->sendMessage($chatId, $response);

        return response()->json(['status' => 'success']);
    }

    private function handleUserInput(int $userId, int $chatId, string $text, int $messageTime): string
    {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $state = $this->getUserState($userId);
        Log::info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}:", $state);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        if (!empty($state) && isset($state['timestamp']) && $messageTime < $state['timestamp']) {
            Log::warning("–£—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}: {$text}");
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.";
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (!empty($state)) {
            if ($state['step'] === 'waiting_for_group') {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                $this->saveUserData($userId, ['group' => $text]);
                $this->clearUserState($userId);
                Log::info("–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}: {$text}");
                return "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {$text}\n–í–≤–µ–¥–∏—Ç–µ /EnterGoal –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–∏";
            }

            if ($state['step'] === 'waiting_for_goal') {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
                $this->saveUserData($userId, ['goal' => $text]);
                $userData = $this->getUserData($userId);
                $this->clearUserState($userId);
                Log::info("–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}: {$text}");
                return "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {$userData['group']}\n–í–∞—à–∞ —Ü–µ–ª—å: {$text}";
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        switch ($text) {
            case '/start':
            case '/help':
                return "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ Laravel.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/plan - –ü–ª–∞–Ω\n/EnterGroup - –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É\n/EnterGoal - –£–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å";
            case '/schedule':
                return "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n–ü–Ω-–ü—Ç: 9:00-18:00";
            case '/plan':
                return "üìù –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n1. –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞\n2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª";
            case '/EnterGroup':
                $this->setUserState($userId, ['step' => 'waiting_for_group', 'timestamp' => $messageTime]);
                Log::info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_group –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}");
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò–ù-36):";
            case '/EnterGoal':
                $userData = $this->getUserData($userId);
                if (!isset($userData['group'])) {
                    return "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é /EnterGroup";
                }
                $this->setUserState($userId, ['step' => 'waiting_for_goal', 'timestamp' => $messageTime]);
                Log::info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_goal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}");
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø —Ö–æ—á—É –≤—ã—É—á–∏—Ç—å C++ –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏):";
            default:
                Log::warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}: {$text}");
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥";
        }
    }

    private function saveUserData(int $userId, array $data)
    {
        $filePath = 'user_data.json';
        $existingData = Storage::exists($filePath)
            ? json_decode(Storage::get($filePath), true)
            : [];

        $existingData[$userId] = array_merge($existingData[$userId] ?? [], $data);

        Storage::put($filePath, json_encode($existingData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        Log::info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", $data);
    }

    private function getUserData(int $userId): array
    {
        $filePath = 'user_data.json';
        if (!Storage::exists($filePath)) {
            return [];
        }

        $data = json_decode(Storage::get($filePath), true);
        return $data[$userId] ?? [];
    }

    private function setUserState(int $userId, array $state)
    {
        $filePath = 'user_states.json';
        $states = Storage::exists($filePath)
            ? json_decode(Storage::get($filePath), true)
            : [];

        $states[$userId] = $state;
        Storage::put($filePath, json_encode($states, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        Log::info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", $state);
    }

    private function getUserState(int $userId): array
    {
        $filePath = 'user_states.json';
        if (!Storage::exists($filePath)) {
            return [];
        }

        $states = json_decode(Storage::get($filePath), true);
        return $states[$userId] ?? [];
    }

    private function clearUserState(int $userId)
    {
        $filePath = 'user_states.json';
        $states = Storage::exists($filePath)
            ? json_decode(Storage::get($filePath), true)
            : [];

        unset($states[$userId]);
        Storage::put($filePath, json_encode($states, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        Log::info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId} –æ—á–∏—â–µ–Ω–æ");
    }

    public function getUserDataEndpoint()
    {
        $filePath = 'user_data.json';
        if (!Storage::exists($filePath)) {
            return response()->json(['error' => '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'], 404);
        }
    
        $data = json_decode(Storage::get($filePath), true);
        return response()->json($data, 200, [], JSON_UNESCAPED_UNICODE);
    }

    private function validateToken()
    {
        if (empty($this->token)) {
            Log::error('TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
            abort(500, '–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        if (!preg_match('/^\d+:[\w-]+$/', $this->token)) {
            Log::error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ Telegram');
            abort(500, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ Telegram-–±–æ—Ç–∞');
        }
    }

    private function sendMessage(int $chatId, string $text)
    {
        try {
            $this->client->post("https://api.telegram.org/bot{$this->token}/sendMessage", [
                'form_params' => [
                    'chat_id' => $chatId,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]
            ]);
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ' . $e->getMessage());
        }
    }
}