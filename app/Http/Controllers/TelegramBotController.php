<?php

namespace App\Http\Controllers;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class TelegramBotController extends Controller
{
    private string $token;
    private Client $client;
    private string $plannerServiceUrl = 'https://2dbeaf81-f8d3-4283-aaf1-a3c5697149f8.tunnel4.com//api';
    /**
     * @var array<int, array{cancelled: bool, start_time: int, job_id: string, chat_id: int}>
     */
    private array $activePolls = [];

    public function __construct()
    {
        $this->token = env('TELEGRAM_BOT_TOKEN');
        $this->validateToken();
        $this->client = new Client([
            'timeout' => 100,
            'connect_timeout' => 25,
        ]);
    }

    public function handleWebhook(Request $request): JsonResponse
    {
        $input = $request->all();
        Log::info('–í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ Telegram:', $input);

        if (!isset($input['message'])) {
            return response()->json(['status' => 'error', 'message' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å']);
        }

        $message = $input['message'];
        $chatId = $message['chat']['id'];
        $userId = $message['from']['id'];
        $text = $message['text'] ?? '';
        $messageTime = $message['date'] ?? time();

        if (strtolower($text) === '/cancel') {
            $response = $this->handleCancelCommand($userId, $chatId);
        } else {
            $response = $this->handleUserInput($userId, $chatId, $text, $messageTime);
        }

        $this->sendMessage($chatId, $response);
        return response()->json(['status' => 'success']);
    }

    /**
     * @param array{step?: string, timestamp?: int, pending_action?: string, missing_data?: string[], current_step?: int} $state
     */
    private function handleUserInput(int $userId, int $chatId, string $text, int $messageTime): string
    {
        $state = $this->getUserState($userId);

        if (!empty($state)) {
            if (isset($state['timestamp']) && $messageTime < $state['timestamp']) {
                return "‚åõ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.";
            }

            if (
                isset($state['pending_action']) &&
                $state['pending_action'] === 'generate_plan' &&
                isset($state['missing_data'], $state['current_step'], $state['timestamp'])
            ) {
                return $this->handlePlanGenerationDataCollection($userId, $chatId, $text, $state);
            }
        }

        switch ($text) {
            case '/start':
            case '/help':
                return $this->getHelpMessage();

            case '/plan':
                $userData = $this->getUserData($userId);
                $goal = $userData['goal'] ?? null;
                return $goal
                    ? "üìã –¶–µ–ª—å: {$goal}"
                    : "‚ùå –¶–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /EnterGoal –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–∏.";

            case '/EnterGroup':
                $this->setUserState($userId, [
                    'step' => 'waiting_for_group',
                    'timestamp' => time()
                ]);
                return "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò–ù-36):";

            case '/EnterGoal':
                $userData = $this->getUserData($userId);
                if (!isset($userData['group'])) {
                    return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /EnterGroup";
                }
                $this->setUserState($userId, [
                    'step' => 'waiting_for_goal',
                    'timestamp' => time()
                ]);
                return "üéØ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é —Ü–µ–ª—å:";

            case '/GeneratePlan':
                return $this->initiatePlanGenerationFlow($userId, $chatId);

            case '/GetPlan':
                return $this->handleGetPlan($userId, $chatId);

            case '/ClearQueue':
                return $this->handleClearQueue($userId, $chatId);

            case '/Cancel':
                return $this->handleCancelCommand($userId, $chatId);

            default:
                return $this->handleUserState($userId, $text, $state);
        }
    }

    private function getHelpMessage(): string
    {
        return "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            . "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            . "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            . "/plan - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å\n"
            . "/EnterGroup - –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
            . "/EnterGoal - –£–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å\n"
            . "/GeneratePlan - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω\n"
            . "/GetPlan - –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω\n"
            . "/ClearQueue - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á\n"
            . "/Cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é";
    }

    /**
     * @param array{step?: string, timestamp?: int, pending_action?: string, missing_data?: string[], current_step?: int} $state
     */
    private function handleUserState(int $userId, string $text, ?array $state): string
    {
        if (empty($state) || !isset($state['step'])) {
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
        }

        switch ($state['step']) {
            case 'waiting_for_group':
                $this->saveUserData($userId, ['group' => $text]);
                $this->clearUserState($userId);
                return "‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ /EnterGoal –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–∏";

            case 'waiting_for_goal':
                $this->saveUserData($userId, ['goal' => $text]);
                $this->clearUserState($userId);
                $group = $this->getUserData($userId)['group'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                return "‚úÖ –¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–ì—Ä—É–ø–ø–∞: {$group}\n–¶–µ–ª—å: {$text}";

            default:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
        }
    }

    private function initiatePlanGenerationFlow(int $userId, int $chatId): string
    {
        if (isset($this->activePolls[$userId])) {
            $jobId = $this->activePolls[$userId]['job_id'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            return "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (Job ID: {$jobId}). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /Cancel.";
        }

        $userData = $this->getUserData($userId);
        $missing = $this->getMissingData($userData);

        if (!empty($missing)) {
            return $this->initiateDataCollection($userId, $missing);
        }

        return $this->executePlanGeneration($userId, $chatId, $userData);
    }

    /**
     * @param array{group?: string, goal?: string} $userData
     * @return string[]
     */
    private function getMissingData(array $userData): array
    {
        $missing = [];
        if (!isset($userData['group'])) {
            $missing[] = 'group';
        }
        if (!isset($userData['goal'])) {
            $missing[] = 'goal';
        }
        return $missing;
    }

    /**
     * @param string[] $missing
     */
    private function initiateDataCollection(int $userId, array $missing): string
    {
        $this->setUserState($userId, [
            'pending_action' => 'generate_plan',
            'missing_data' => $missing,
            'current_step' => 0,
            'timestamp' => time()
        ]);

        return $this->generateDataRequestMessage($missing[0]);
    }

    private function generateDataRequestMessage(string $field): string
    {
        $messages = [
            'group' => "üìù –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            'goal' => "üéØ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é —Ü–µ–ª—å:"
        ];
        return $messages[$field] ?? "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:";
    }

    /**
     * @param array{pending_action: string, missing_data: string[], current_step: int, timestamp: int} $state
     */
    private function handlePlanGenerationDataCollection(int $userId, int $chatId, string $text, array $state): string
    {
        $missing = $state['missing_data'];
        $currentStep = $state['current_step'];
        $currentField = $missing[$currentStep];

        $this->saveUserData($userId, [$currentField => $text]);
        $nextStep = $currentStep + 1;

        if ($nextStep >= count($missing)) {
            $this->clearUserState($userId);
            $userData = $this->getUserData($userId);
            if (!isset($userData['group'], $userData['goal'])) {
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            }
            return $this->executePlanGeneration($userId, $chatId, $userData);
        }

        $this->setUserState($userId, [
            'pending_action' => 'generate_plan',
            'missing_data' => $missing,
            'current_step' => $nextStep,
            'timestamp' => time()
        ]);

        return $this->generateDataRequestMessage($missing[$nextStep]);
    }

    /**
     * @param array{group: string, goal: string} $userData
     */
    private function executePlanGeneration(int $userId, int $chatId, array $userData): string
    {
        if (isset($this->activePolls[$userId])) {
            $jobId = $this->activePolls[$userId]['job_id'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            Log::info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –¥–ª—è user {$userId}, job {$jobId}. –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.");
            return "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (Job ID: {$jobId}). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /Cancel.";
        }

        $existingJobData = $this->getJobData($userId);
        if ($existingJobData) {
            $jobId = $existingJobData['job_id'] ?? null;
            $jobStatus = $jobId ? $this->checkJobStatus($jobId) : 'unknown';

            if (in_array($jobStatus, ['pending', 'processing'])) {
                Log::info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –¥–ª—è user {$userId}, job {$jobId}. –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.");
                return "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (Job ID: {$jobId}). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /Cancel.";
            } elseif ($jobStatus === 'completed') {
                if (
                    isset($existingJobData['goal'], $existingJobData['group']) &&
                    $existingJobData['goal'] === $userData['goal'] &&
                    $existingJobData['group'] === $userData['group']
                ) {
                    Log::info("–ü–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user {$userId}, job {$jobId} —Å —Ç–æ–π –∂–µ —Ü–µ–ª—å—é –∏ –≥—Ä—É–ø–ø–æ–π.");
                    return "‚úÖ –ü–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã (Job ID: {$jobId}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /GetPlan, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.";
                }
            }
        }

        try {
            Log::debug('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞:', [
                'user_id' => $userId,
                'goal' => $userData['goal'],
                'group_id' => $userData['group']
            ]);

            $response = $this->client->post("{$this->plannerServiceUrl}/generate-plan", [
                'headers' => [
                    'Content-Type' => 'application/json',
                    'Accept' => 'application/json'
                ],
                'json' => [
                    'user_id' => $userId,
                    'goal' => $userData['goal'],
                    'group_id' => $userData['group']
                ]
            ]);

            if ($response->getStatusCode() === 202) {
                $responseData = json_decode($response->getBody(), true);
                $jobId = $responseData['job_id'] ?? null;

                if (!$jobId) {
                    Log::error("–ù–µ –ø–æ–ª—É—á–µ–Ω job_id –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è user {$userId}");
                    return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                }

                $this->saveJobData($userId, [
                    'job_id' => $jobId,
                    'goal' => $userData['goal'],
                    'group' => $userData['group']
                ]);
                $this->startPolling($userId, $chatId, $jobId, $userData['goal'], $userData['group']);

                return "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –Ω–∞—á–∞—Ç–∞!\n"
                     . "‚ñ∏ –ì—Ä—É–ø–ø–∞: {$userData['group']}\n"
                     . "‚ñ∏ –¶–µ–ª—å: {$userData['goal']}\n"
                     . "–Ø –ø—Ä–∏—à–ª—é –ø–ª–∞–Ω, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!";
            }
        } catch (RequestException $e) {
            $responseBody = $e->hasResponse() ? (string) $e->getResponse()->getBody() : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
            Log::error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –¥–ª—è user {$userId}: " . $e->getMessage(), [
                'response' => $responseBody,
                'code' => $e->getCode()
            ]);
            $this->clearJobData($userId);
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞: " . $e->getMessage() . ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        }

        $this->clearJobData($userId);
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    private function startPolling(int $userId, int $chatId, string $jobId, string $goal, string $group): void
    {
        if (isset($this->activePolls[$userId])) {
            Log::warning("–û–ø—Ä–æ—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è user {$userId}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.");
            return;
        }

        $this->activePolls[$userId] = [
            'cancelled' => false,
            'start_time' => time(),
            'job_id' => $jobId,
            'chat_id' => $chatId // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
        ];
        Log::info("–ù–∞—á–∞—Ç –æ–ø—Ä–æ—Å –¥–ª—è user {$userId}, job {$jobId}, chat {$chatId}");
        $this->pollPlanResult($userId, $jobId, $goal, $group);
    }

    private function pollPlanResult(int $userId, string $jobId): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ activePolls
        if (!isset($this->activePolls[$userId])) {
            Log::info("–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {$userId}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ activePolls.");
            return;
        }

        $chatId = $this->activePolls[$userId]['chat_id'] ?? null;
        if (!$chatId) {
            Log::error("chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user {$userId}, job {$jobId}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞.");
            unset($this->activePolls[$userId]);
            $this->clearJobData($userId);
            return;
        }

        if ($this->activePolls[$userId]['cancelled']) {
            Log::info("–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {$userId}: –æ—Ç–º–µ–Ω–µ–Ω.");
            unset($this->activePolls[$userId]);
            $this->clearJobData($userId);
            return;
        }

        try {
            Log::debug("–û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user {$userId}, job {$jobId}");
            $response = $this->client->get("{$this->plannerServiceUrl}/get-plan-result/{$jobId}", [
                'headers' => ['Accept' => 'application/json'],
                'timeout' => 30,
            ]);

            $responseData = json_decode($response->getBody(), true);
            $status = $responseData['status'] ?? 'unknown';

            Log::debug("–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ –¥–ª—è user {$userId}, job {$jobId}: {$status}");

            if ($status === 'completed') {
                $this->sendFormattedPlan($chatId, $responseData['plan_data']);
                Log::info("–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user {$userId}, job {$jobId}, chat {$chatId}.");
            } elseif ($status === 'failed') {
                $errorMsg = $responseData['error_details'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                $this->sendMessage($chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {$errorMsg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                Log::info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è user {$userId}, job {$jobId}.");
            } else {
                $this->sendMessage($chatId, "‚è≥ –ü–ª–∞–Ω –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è (Job ID: {$jobId}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é /GetPlan.");
                Log::info("–ü–ª–∞–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è user {$userId}, job {$jobId}.");
                return; // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ
            }
        } catch (RequestException $e) {
            Log::error("–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –¥–ª—è user {$userId}, job {$jobId}: " . $e->getMessage());
            Log::debug('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', ['trace' => $e->getTraceAsString()]);
            $this->sendMessage($chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: " . $e->getMessage() . ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        unset($this->activePolls[$userId]);
        if ($status !== 'pending' && $status !== 'processing') {
            $this->clearJobData($userId);
        }
    }

    private function handleGetPlan(int $userId, int $chatId): string
    {
        $jobData = $this->getJobData($userId);
        if (!$jobData || !isset($jobData['job_id'])) {
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /GeneratePlan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞.";
        }

        $jobId = $jobData['job_id'];
        try {
            $response = $this->client->get("{$this->plannerServiceUrl}/get-plan-result/{$jobId}", [
                'headers' => ['Accept' => 'application/json'],
                'timeout' => 30,
            ]);

            $responseData = json_decode($response->getBody(), true);
            $status = $responseData['status'] ?? 'unknown';

            if ($status === 'completed') {
                $this->sendFormattedPlan($chatId, $responseData['plan_data']);
                return "‚úÖ –ü–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!";
            } elseif (in_array($status, ['pending', 'processing'])) {
                return "‚è≥ –ü–ª–∞–Ω –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è (Job ID: {$jobId}). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.";
            } else {
                return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è Job ID {$jobId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            }
        } catch (RequestException $e) {
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –¥–ª—è user {$userId}, job {$jobId}: " . $e->getMessage());
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω: " . $e->getMessage() . ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private function checkJobStatus(string $jobId): string
    {
        try {
            $response = $this->client->get("{$this->plannerServiceUrl}/get-plan-result/{$jobId}", [
                'headers' => ['Accept' => 'application/json'],
                'timeout' => 30,
            ]);
            $responseData = json_decode($response->getBody(), true);
            return $responseData['status'] ?? 'unknown';
        } catch (RequestException $e) {
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {$jobId}: " . $e->getMessage());
            return 'failed';
        }
    }

    /**
 * @param array{plan_title: string, estimated_duration_weeks: string, weekly_overview: array<int, array{week_number: int, weekly_goal: string, daily_tasks: array<int, array{day_name: string, learning_activities: array<int, array{topic: string, description: string, suggested_slot: string, estimated_duration_minutes: int, resources?: array<int, string>}>}>, general_recommendations?: string} $planData
 */
    private function sendFormattedPlan(int $chatId, array $planData): void
    {
        // Send header
        $header = "üìò <b>" . htmlspecialchars($planData['plan_title']) . "</b>\n";
        $header .= "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " . htmlspecialchars($planData['estimated_duration_weeks']) . "\n";
        $this->sendMessage($chatId, $header);

        // Send each week separately
        foreach ($planData['weekly_overview'] as $week) {
            $weekMessage = "üìå <b>–ù–µ–¥–µ–ª—è " . htmlspecialchars($week['week_number']) . ": " . htmlspecialchars($week['weekly_goal']) . "</b>\n";
            foreach ($week['daily_tasks'] as $day) {
                $weekMessage .= "\n<b>" . htmlspecialchars($day['day_name']) . "</b>\n";
                foreach ($day['learning_activities'] as $activity) {
                    $weekMessage .= "‚è∞ " . htmlspecialchars($activity['suggested_slot']) . " (" . htmlspecialchars($activity['estimated_duration_minutes']) . " –º–∏–Ω)\n";
                    $weekMessage .= "üîπ <b>" . htmlspecialchars($activity['topic']) . "</b>\n" . htmlspecialchars($activity['description']) . "\n";
                    if (!empty($activity['resources']) && is_array($activity['resources'])) {
                        $weekMessage .= "üìö –†–µ—Å—É—Ä—Å—ã: " . implode(', ', array_map('htmlspecialchars', $activity['resources'])) . "\n";
                    }
                    $weekMessage .= "\n";
                }
            }
            // Check length and send
            if (mb_strlen($weekMessage, 'UTF-8') > 4096) {
                Log::warning("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–¥–µ–ª–∏ {$week['week_number']} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: " . mb_strlen($weekMessage, 'UTF-8') . " —Å–∏–º–≤–æ–ª–æ–≤");
                $this->sendMessage($chatId, "‚ö†Ô∏è –ù–µ–¥–µ–ª—è {$week['week_number']} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø–ª–∞–Ω–∞.");
            } else {
                $this->sendMessage($chatId, $weekMessage);
            }
        }

        // Send recommendations if present
        if (!empty($planData['general_recommendations'])) {
            $recommendations = "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n" . htmlspecialchars($planData['general_recommendations']);
            if (mb_strlen($recommendations, 'UTF-8') > 4096) {
                Log::warning("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ: " . mb_strlen($recommendations, 'UTF-8') . " —Å–∏–º–≤–æ–ª–æ–≤");
                $this->sendMessage($chatId, "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø–ª–∞–Ω–∞.");
            } else {
                $this->sendMessage($chatId, $recommendations);
            }
        }

        Log::info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –¥–ª—è chat_id {$chatId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    private function handleCancelCommand(int $userId, int $chatId): string
    {
        if (!isset($this->activePolls[$userId])) {
            return "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã";
        }

        $jobId = $this->activePolls[$userId]['job_id'] ?? null;
        $this->activePolls[$userId]['cancelled'] = true;
        unset($this->activePolls[$userId]);
        $this->clearJobData($userId);

        if ($jobId) {
            try {
                $this->client->post("{$this->plannerServiceUrl}/cancel-plan/{$jobId}", [
                    'headers' => ['Accept' => 'application/json'],
                    'timeout' => 10,
                ]);
                Log::info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è {$jobId} –¥–ª—è user {$userId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
            } catch (RequestException $e) {
                Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è {$jobId} –¥–ª—è user {$userId}: " . $e->getMessage());
                Log::debug('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', ['trace' => $e->getTraceAsString()]);
            }
        }

        try {
            Log::info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è user {$userId}, job {$jobId}.");
            return "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";
        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –¥–ª—è user {$userId}: " . $e->getMessage());
            Log::debug('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', ['trace' => $e->getTraceAsString()]);
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: " . $e->getMessage() . ". –û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        }
    }

    private function handleClearQueue(int $userId, int $chatId): string
    {
        $clearedCount = 0;

        if (isset($this->activePolls[$userId])) {
            $jobId = $this->activePolls[$userId]['job_id'] ?? null;
            $this->activePolls[$userId]['cancelled'] = true;
            unset($this->activePolls[$userId]);
            $this->clearJobData($userId);

            if ($jobId) {
                try {
                    $this->client->post("{$this->plannerServiceUrl}/cancel-plan/{$jobId}", [
                        'headers' => ['Accept' => 'application/json'],
                        'timeout' => 10,
                    ]);
                    Log::info("–ó–∞–¥–∞—á–∞ {$jobId} –¥–ª—è user {$userId} –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ /ClearQueue.");
                    $clearedCount++;
                } catch (RequestException $e) {
                    Log::error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {$jobId} –¥–ª—è user {$userId} —á–µ—Ä–µ–∑ /ClearQueue: " . $e->getMessage());
                }
            }
        }

        $jobData = $this->getJobData($userId);
        if ($jobData && isset($jobData['job_id'])) {
            $jobId = $jobData['job_id'];
            try {
                $this->client->post("{$this->plannerServiceUrl}/cancel-plan/{$jobId}", [
                    'headers' => ['Accept' => 'application/json'],
                    'timeout' => 10,
                ]);
                Log::info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {$jobId} –¥–ª—è user {$userId} –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ /ClearQueue.");
                $this->clearJobData($userId);
                $clearedCount++;
            } catch (RequestException $e) {
                Log::error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ {$jobId} –¥–ª—è user {$userId} —á–µ—Ä–µ–∑ /ClearQueue: " . $e->getMessage());
            }
        }

        try {
            $response = $this->client->post("{$this->plannerServiceUrl}/clear-queue", [
                'headers' => ['Accept' => 'application/json'],
                'json' => ['user_id' => $userId],
                'timeout' => 10,
            ]);
            $responseData = json_decode($response->getBody(), true);
            if ($response->getStatusCode() === 200 && $responseData['status'] === 'success') {
                Log::info("–û—á–µ—Ä–µ–¥—å –¥–ª—è user {$userId} –æ—á–∏—â–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
                $clearedCount += $responseData['cleared_count'] ?? 0;
            }
        } catch (RequestException $e) {
            Log::warning("–≠–Ω–¥–ø–æ–∏–Ω—Ç /clear-queue –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è user {$userId}: " . $e->getMessage());
        }

        if ($clearedCount > 0) {
            return "‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞. –û—Ç–º–µ–Ω–µ–Ω–æ {$clearedCount} –∑–∞–¥–∞–Ω–∏–π.";
        }
        return "‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É.";
    }

    private function validateToken(): void
    {
        if (empty($this->token) || !preg_match('/^\d+:[\w-]+$/', $this->token)) {
            Log::error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram');
            abort(500, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞');
        }
    }

    private function sendMessage(int $chatId, string $text): void
    {
        try {
            $this->client->post("https://api.telegram.org/bot{$this->token}/sendMessage", [
                'form_params' => [
                    'chat_id' => $chatId,
                    'text' => $text,
                    'parse_mode' => 'HTML' // Switch to HTML
                ],
                'timeout' => 10,
            ]);
            Log::debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {$chatId}: " . substr($text, 0, 100) . "...");
        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {$chatId}: " . $e->getMessage());
            Log::debug('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', ['trace' => $e->getTraceAsString()]);
            throw $e;
        }
    }

    /**
     * @param array{step?: string, timestamp?: int, pending_action?: string, missing_data?: string[], current_step?: int} $state
     */
    private function setUserState(int $userId, array $state): void
    {
        $states = Storage::exists('user_states.json')
            ? json_decode(Storage::get('user_states.json'), true)
            : [];

        $states[$userId] = $state;
        $json = json_encode($states, JSON_PRETTY_PRINT);
        if ($json === false) {
            Log::error("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è user_states: " . json_last_error_msg());
            return;
        }
        Storage::put('user_states.json', $json);
    }

    /**
     * @return array{step?: string, timestamp?: int, pending_action?: string, missing_data?: string[], current_step?: int}
     */
    private function getUserState(int $userId): array
    {
        if (!Storage::exists('user_states.json')) {
            return [];
        }
        $states = json_decode(Storage::get('user_states.json'), true);
        return $states[$userId] ?? [];
    }

    private function clearUserState(int $userId): void
    {
        $states = Storage::exists('user_states.json')
            ? json_decode(Storage::get('user_states.json'), true)
            : [];

        unset($states[$userId]);
        $json = json_encode($states, JSON_PRETTY_PRINT);
        if ($json === false) {
            Log::error("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è user_states: " . json_last_error_msg());
            return;
        }
        Storage::put('user_states.json', $json);
    }

    /**
     * @param array{group?: string, goal?: string} $data
     */
    private function saveUserData(int $userId, array $data): void
    {
        $existing = Storage::exists('user_data.json')
            ? json_decode(Storage::get('user_data.json'), true)
            : [];

        $existing[$userId] = array_merge($existing[$userId] ?? [], $data);
        $json = json_encode($existing, JSON_PRETTY_PRINT);
        if ($json === false) {
            Log::error("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è user_data: " . json_last_error_msg());
            return;
        }
        Storage::put('user_data.json', $json);
    }

    /**
     * @return array{group?: string, goal?: string}
     */
    private function getUserData(int $userId): array
    {
        if (!Storage::exists('user_data.json')) {
            return [];
        }
        $data = json_decode(Storage::get('user_data.json'), true);
        return $data[$userId] ?? [];
    }

    /**
     * @param array{job_id: string, goal: string, group: string} $jobData
     */
    private function saveJobData(int $userId, array $jobData): void
    {
        $jobs = Storage::exists('user_jobs.json')
            ? json_decode(Storage::get('user_jobs.json'), true)
            : [];

        $jobs[$userId] = $jobData;
        $json = json_encode($jobs, JSON_PRETTY_PRINT);
        if ($json === false) {
            Log::error("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è user_jobs: " . json_last_error_msg());
            return;
        }
        Storage::put('user_jobs.json', $json);
    }

    private function clearJobData(int $userId): void
    {
        $jobs = Storage::exists('user_jobs.json')
            ? json_decode(Storage::get('user_jobs.json'), true)
            : [];

        unset($jobs[$userId]);
        $json = json_encode($jobs, JSON_PRETTY_PRINT);
        if ($json === false) {
            Log::error("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è user_jobs: " . json_last_error_msg());
            return;
        }
        Storage::put('user_jobs.json', $json);
    }

    /**
     * @return array{job_id: string, goal: string, group: string}|null
     */
    private function getJobData(int $userId): ?array
    {
        if (!Storage::exists('user_jobs.json')) {
            return null;
        }
        $jobs = json_decode(Storage::get('user_jobs.json'), true);
        return $jobs[$userId] ?? null;
    }

    public function getUserDataEndpoint(): JsonResponse
    {
        return response()->json(
            Storage::exists('user_data.json')
                ? json_decode(Storage::get('user_data.json'), true)
                : []
        );
    }
}